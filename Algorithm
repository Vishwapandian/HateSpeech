# Vishwa Pandian
# vrp200001

# All imports
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import re
import nltk
nltk.download('stopwords')
from nltk.util import pr
stemmer = nltk.SnowballStemmer("english")
from nltk.corpus import stopwords
import string
stopword = set(stopwords.words("english"))

# Set Files
train = pd.read_csv("/kaggle/input/csse4375-assignment1/4375train.csv")
test = pd.read_csv("/kaggle/input/csse4375-assignment1/4375test.csv")
print(train.head())

# Clean up data

def clean(text):
    # Remove usernames (words starting with '@')
    text = re.sub(r'@\w+\s*', '', text)
    
    # Remove hashtags (words starting with '#')
    text = re.sub(r'#\w+\s*', '', text)
    
    # Remove extra spaces
    text = ' '.join(text.split())
    
    return text

# Apply cleaning
train["sentence"] = train["sentence"].apply(clean)
test["sentence"] = test["sentence"].apply(clean)
print(train.head())

# Train model using Decision Tree

x = np.array(train["sentence"])
y = np.array(train["label"])

# Vectorize the training data
cv = CountVectorizer()
x = cv.fit_transform(x)

# Impliment decision tree and pass in data
clf = DecisionTreeClassifier()
clf.fit(x, y)

# Evaluate models performance

def evaluate_model(model, test, true_labels):
    x_test = test['sentence']
    y_test = test['label']

    # Vectorize the test data
    x_test = cv.transform(x_test)

    # Predict the labels using the trained model
    y_pred = model.predict(x_test)

    # Calculate evaluation metrics
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')
    confusion = confusion_matrix(y_test, y_pred)


    # Create a DataFrame with "id" and "label" columns
    results = pd.DataFrame({
      'id': test['id'],
      'label': y_pred
    })

    results.to_csv('submission.csv', index=False)

    print("Accuracy:", accuracy)
    print("Precision:", precision)
    print("Recall:", recall)
    print("F1 Score:", f1)
    print("Confusion Matrix:\n", confusion)

evaluate_model(clf, test, test['label'])


# The performance seems to be fairly satisfactory at an accuracy and precision both at around 78%
# However there is a lot of room for improvement by including a more diverse training dataset
# And we can improve performance by using a more sophisticated prediction model
